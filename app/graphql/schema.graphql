type Player {
    id: ID
    name: String
    position: String
    team: String
    headshot: String
    }

type PlayerStats {
    id: ID
    name: String
    points: Int
    rebounds: Int
    assists: Int
    steals: Int
    blocks: Int
}

type Game {
    id: ID
    homeTeam: String
    awayTeam: String
    homeScore: String!
    awayScore: String!
    gameClock: String!
    }

input ParlayLegInput {
    match: String
    bet: String
    result: String
    }

input SaveParlayInput {
    user_id: String
    wager: Float
    odds: Float
    status: String
    legs: [ParlayLegInput]
    }

type ParlayLeg {
    gameId: String
    bet: String
    result: String
}

type Parlay {
    wager: Float
    odds: Float
    status: String
    legs: [ParlayLeg]
    }

type SaveParlayResponse {
  success: Boolean!
  parlay_id: Int!
}

type Query {
    liveGames: [Game]
    teamRoster(teamId: String!): [Player]
    livePlayerStats(gameId: String!, playerIds: [String]): [PlayerStats]
    fetchParlay(userId: String): [Parlay]
    }

type Mutation {
    saveParlay(input: SaveParlayInput): SaveParlayResponse
}
